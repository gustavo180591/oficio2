{% extends 'base.html.twig' %}

{% block title %}LISTADO COMPLETO{% endblock %}

{% block body %}
<div class="container">
    <h1 class="my-4">Listado de Oficios / <a href="{{ path('app_full_register') }}" class="text-decoration-none">Registro</a></h1>

    <div class="card mb-4">
        <div class="card-body">
            <form method="get" action="{{ path('app_full_list') }}" class="row g-3">
                <div class="col-md-6">
                    <div class="input-group">
                        <input type="text" name="q" class="form-control" placeholder="Buscar oficios..." value="{{ searchTerm }}">
                        <button class="btn btn-outline-secondary" type="submit">
                            <i class="bi bi-search"></i> Buscar
                        </button>
                    </div>
                </div>
                <div class="col-md-4">
                    <select name="status" class="form-select" onchange="this.form.submit()">
                        <option value="">Todos los estados</option>
                        <option value="1" {{ currentStatus == '1' ? 'selected' : '' }}>Habilitados</option>
                        <option value="0" {{ currentStatus == '0' ? 'selected' : '' }}>Deshabilitados</option>
                    </select>
                </div>
                <div class="col-md-2 text-end">
                    <a href="{{ path('app_full_list') }}" class="btn btn-outline-secondary">
                        <i class="bi bi-arrow-counterclockwise"></i> Limpiar
                    </a>
                </div>
            </form>
        </div>
    </div>

    <div class="d-flex justify-content-between align-items-center mb-3">
        <div>
            <button type="button" class="btn btn-success" data-bs-toggle="modal" data-bs-target="#modalAddOficio">
                <i class="bi bi-plus-circle"></i> Crear Nuevo Oficio
            </button>
        </div>
        <div class="text-muted">
            Mostrando {{ pagination.items|length }} de {{ pagination.getTotalItemCount }} registros
        </div>
    </div>

    <div class="table-responsive">
        <table class="table table-striped table-bordered">
            <thead class="table-dark">
                <tr>
                    <th>ID</th>
                    <th>Nombre</th>
                    <th>Fecha de Creación</th>
                    <th>Status</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                {% for oficio in pagination %}
                    <tr>
                        <td>{{ oficio.id }}</td>
                        <td>{{ oficio.name }}</td>
                        <td>{{ oficio.createdAt ? oficio.createdAt|date('d/m/Y H:i') : 'N/A' }}</td>
                        <td class="text-center">
                            <div class="btn-group btn-group-toggle" role="group" data-toggle="buttons">
                                <button 
                                    type="button"
                                    class="btn btn-sm {% if oficio.status %}btn-success text-white{% else %}btn-outline-success{% endif %} status-toggle" 
                                    data-id="{{ oficio.id }}" 
                                    data-status="1"
                                    {% if oficio.status %}aria-pressed="true"{% endif %}>
                                    <i class="bi bi-check-circle"></i> Activo
                                </button>
                                <button 
                                    type="button"
                                    class="btn btn-sm {% if not oficio.status %}btn-danger text-white{% else %}btn-outline-danger{% endif %} status-toggle" 
                                    data-id="{{ oficio.id }}" 
                                    data-status="0"
                                    {% if not oficio.status %}aria-pressed="true"{% endif %}>
                                    <i class="bi bi-x-circle"></i> Inactivo
                                </button>
                            </div>
                        </td>
                        <td class="text-nowrap">
                            <div class="btn-group" role="group">
                                <a href="#" class="btn btn-sm btn-primary" title="Editar">
                                    <i class="bi bi-pencil"></i>
                                </a>
                                <button type="button" class="btn btn-sm btn-danger delete-oficio" data-id="{{ oficio.id }}" title="Eliminar">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </div>
                        </td>
                    </tr>
                {% else %}
                    <tr>
                        <td colspan="4" class="text-center">No se encontraron oficios</td>
                    </tr>
                {% endfor %}
            </tbody>
        </table>
    </div>

    {# Paginación #}
    <div class="d-flex justify-content-center mt-4">
        {{ knp_pagination_render(pagination) }}
    </div>
</div>

{% block stylesheets %}
    {{ parent() }}
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
    <style>
        .pagination > li > a, .pagination > li > span {
            color: #0d6efd;
        }
        .pagination > .active > a, .pagination > .active > a:focus, .pagination > .active > a:hover, .pagination > .active > span, .pagination > .active > span:focus, .pagination > .active > span:hover {
            background-color: #0d6efd;
            border-color: #0d6efd;
        }
        .btn-group .btn {
            margin-right: 2px;
        }
        .btn-group .btn:last-child {
            margin-right: 0;
        }
    </style>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        $(document).ready(function() {
            // CSRF Tokens
            const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');
            const csrfTokenDelete = document.querySelector('meta[name="csrf-token-delete"]').getAttribute('content');

            // Toggle status
            $(document).on('click', '.status-toggle', function(e) {
                e.preventDefault();
                const button = $(this);
                const oficioId = button.data('id');
                const newStatus = button.data('status') === '1';
                const buttonGroup = button.closest('.btn-group');
                
                console.log('Status toggle clicked', { oficioId, newStatus });
                
                // Don't do anything if this is already the active state
                if ((newStatus && button.hasClass('btn-success')) || (!newStatus && button.hasClass('btn-danger'))) {
                    console.log('This status is already active, ignoring click');
                    return;
                }
                
                // Show loading state
                const originalHtml = buttonGroup.html();
                buttonGroup.html('<div class="d-flex align-items-center"><span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span><span>Actualizando...</span></div>');
                buttonGroup.find('button').prop('disabled', true);
                
                // Prepare data
                const requestData = {
                    status: newStatus,
                    _token: csrfToken
                };
                
                console.log('Sending request with data:', requestData);
                
                // Make the AJAX request
                $.ajax({
                    url: `/oficio/${oficioId}/toggle-status`,
                    method: 'POST',
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest',
                        'Accept': 'application/json',
                        'Content-Type': 'application/json'
                    },
                    data: JSON.stringify(requestData),
                    success: function(response) {
                        console.log('Server response:', response);
                        if (response.success) {
                            // Restore the button group HTML
                            buttonGroup.find('button').show();
                            
                            // Update both buttons in the group
                            const activeBtn = buttonGroup.find('[data-status="1"]');
                            const inactiveBtn = buttonGroup.find('[data-status="0"]');
                            
                            // Reset all buttons first
                            activeBtn.removeClass('btn-success btn-outline-success text-white')
                                     .addClass('btn-outline-success');
                            inactiveBtn.removeClass('btn-danger btn-outline-danger text-white')
                                       .addClass('btn-outline-danger');
                            
                            // Set the active state based on server response
                            if (response.status) {
                                activeBtn.removeClass('btn-outline-success')
                                         .addClass('btn-success text-white');
                            } else {
                                inactiveBtn.removeClass('btn-outline-danger')
                                           .addClass('btn-danger text-white');
                            }
                            
                            // Update the data attributes
                            activeBtn.data('status', '1');
                            inactiveBtn.data('status', '0');
                            
                            // Show success message
                            Swal.fire({
                                icon: 'success',
                                title: '¡Éxito!',
                                text: 'El estado se actualizó correctamente',
                                toast: true,
                                position: 'top-end',
                                showConfirmButton: false,
                                timer: 3000
                            });
                        }
                    },
                    error: function(xhr, status, error) {
                        let errorMessage = 'No se pudo actualizar el estado';
                        if (xhr.responseJSON && xhr.responseJSON.error) {
                            errorMessage = xhr.responseJSON.error;
                            if (xhr.responseJSON.message) {
                                errorMessage += ': ' + xhr.responseJSON.message;
                            }
                        }
                        
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: errorMessage,
                            toast: true,
                            position: 'top-end',
                            showConfirmButton: false,
                            timer: 5000
                        });
                    },
                    complete: function() {
                        buttonGroup.find('button').prop('disabled', false);
                    }
                });
            });
            
            // Delete oficio
            $(document).on('click', '.delete-oficio', function() {
                const button = $(this);
                const oficioId = button.data('id');
                const oficioName = button.closest('tr').find('td:nth-child(2)').text().trim();
                
                Swal.fire({
                    title: '¿Estás seguro?',
                    html: `¿Deseas eliminar el oficio <strong>${oficioName}</strong>?<br>¡Esta acción no se puede deshacer!`,
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#d33',
                    cancelButtonColor: '#6c757d',
                    confirmButtonText: 'Sí, eliminar',
                    cancelButtonText: 'Cancelar',
                    reverseButtons: true
                }).then((result) => {
                    if (result.isConfirmed) {
                        // Show loading state
                        button.html('<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>');
                        button.prop('disabled', true);
                        
                        // Prepare delete request data
                        const deleteData = {
                            _token: csrfTokenDelete
                        };
                        
                        $.ajax({
                            url: `/oficio/${oficioId}/delete`,
                            method: 'DELETE',
                            headers: {
                                'X-Requested-With': 'XMLHttpRequest',
                                'Accept': 'application/json',
                                'Content-Type': 'application/json'
                            },
                            data: JSON.stringify(deleteData),
                            success: function(response) {
                                if (response.success) {
                                    // Remove the row from the table
                                    button.closest('tr').fadeOut(400, function() {
                                        $(this).remove();
                                        
                                        // Update counter
                                        const count = $('table tbody tr:visible').length;
                                        if (count === 0) {
                                            $('table tbody').html('<tr><td colspan="5" class="text-center">No se encontraron oficios</td></tr>');
                                        }
                                    });
                                    
                                    Swal.fire({
                                        icon: 'success',
                                        title: '¡Eliminado!',
                                        text: 'El oficio ha sido eliminado correctamente.',
                                        toast: true,
                                        position: 'top-end',
                                        showConfirmButton: false,
                                        timer: 3000
                                    });
                                }
                            },
                            error: function(xhr, status, error) {
                                let errorMessage = 'No se pudo eliminar el oficio';
                                if (xhr.responseJSON && xhr.responseJSON.error) {
                                    errorMessage = xhr.responseJSON.error;
                                    if (xhr.responseJSON.message) {
                                        errorMessage += ': ' + xhr.responseJSON.message;
                                    }
                                }
                                
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Error',
                                    text: errorMessage,
                                    toast: true,
                                    position: 'top-end',
                                    showConfirmButton: false,
                                    timer: 5000
                                });
                            },
                            complete: function() {
                                button.html('<i class="bi bi-trash"></i>');
                                button.prop('disabled', false);
                            }
                        });
                    }
                });
            });
        });
    </script>
{% endblock %}

<!-- Modal para agregar oficio -->
<div class="modal fade" id="modalAddOficio" tabindex="-1" aria-labelledby="modalAddOficioLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalAddOficioLabel">Agregar Oficio</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="recomendacionForm" action="{{ path('app_oficio_nuevo') }}" method="post">
                    <div class="mb-3">
                        <label for="nombreOficio" class="form-label">Nombre del Oficio</label>
                        <input type="text" class="form-control" id="nombreOficio" name="nombreOficio" placeholder="Ingrese el nombre del oficio" required>
                    </div>
                    <button type="submit" form="recomendacionForm" class="btn btn-primary">Agregar</button>
                </form>
            </div>
        </div>
    </div>
</div>

{% endblock %}
